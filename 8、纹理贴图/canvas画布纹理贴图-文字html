<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>纹理贴图</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            /* 隐藏body窗口区域滚动条 */
        }
    </style>
    <!--引入three.js三维引擎-->
    <script src="http://www.yanhuangxueyuan.com/versions/threejsR92/build/three.js"></script>
    <script src="http://www.yanhuangxueyuan.com/versions/threejsR92/examples/js/controls/OrbitControls.js"></script>
</head>

<body>
    <script>
        /**
         * 1、创建场景对象Scene
         */
        var scene = new THREE.Scene();
        /**
         *2、创建网格模型
         */
         var canvas = document.createElement("canvas");
        canvas.id = 'canvas';
        canvas.width = 512;
        canvas.height = 128;
        var c = canvas.getContext('2d');
        // 矩形区域填充背景
        c.fillStyle = "#ff00ff";
        c.fillRect(0, 0, 512, 128);
        c.beginPath();
        // 文字
        c.beginPath();
        c.translate(256, 64);
        c.fillStyle = "#000000"; //文本填充颜色
        c.font = "bold 48px 宋体"; //字体样式设置
        c.textBaseline = "middle"; //文本与fillText定义的纵坐标
        c.textAlign = "center"; //文本居中(以fillText定义的横坐标)
        c.fillText("郭隆邦_技术博客", 0, 0);
        var texture = new THREE.CanvasTexture(canvas);
        //打印纹理对象的image属性
        // console.log(texture.image);
        //矩形平面
        var geometry = new THREE.PlaneGeometry(128, 32);

        var material = new THREE.MeshPhongMaterial({
            map: texture, // 设置纹理贴图
        });
        // 创建一个矩形平面网模型，Canvas画布作为矩形网格模型的纹理贴图
        var mesh = new THREE.Mesh(geometry, material);
        scene.add(mesh);
        geometry.center();
                // geometry.scale(1.5,1.5,1.5);//几何体缩放
        /**
         * 5、光源设置
         */
        //点光源
        var point = new THREE.PointLight("ffffff");
        point.position.set(300, 400, 300); //点光源位置
        scene.add(point); //点光源添加到场景中
        // 6、环境光
        var ambient = new THREE.AmbientLight(0x444444);
        scene.add(ambient);
        /**
         * 7、相机设置
         */
        var width = window.innerWidth; //窗口宽度
        var height = window.innerHeight; //窗口高度
        var k = width / height; //窗口宽高比
        var s = 200; //三维场景显示范围控制系数，系数越大，显示的范围越大
        //创建相机对象
        var camera = new THREE.OrthographicCamera(-s * k, s * k, s, -s, 1, 1000);
        camera.position.set(0, 0, 200); //设置相机位置
        camera.lookAt(scene.position); //设置相机方向(指向的场景对象)
        /**
         * 8、创建渲染器对象
         */
        var renderer = new THREE.WebGLRenderer();
        renderer.setSize(width, height); //设置渲染区域尺寸
        renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色
        document.body.appendChild(renderer.domElement); //body元素中插入canvas对象
        // 9、创建控件对象
        new THREE.OrbitControls(camera, renderer.domElement); //创建控件对象
        // 10、渲染
        function render() {
            renderer.render(scene, camera); //执行渲染操作
            requestAnimationFrame(render);
        }
        render();

    //   controls.addEventListener("change", render); //监听鼠标、键盘事件
    </script>
</body>

</html>